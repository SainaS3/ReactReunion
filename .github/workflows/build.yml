name: Build React Native App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-ios:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup cache for node_modules
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node_modules-

    - name: Setup cache for CocoaPods
      uses: actions/cache@v2
      with:
        path: ios/Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-

    - name: Setup cache for DerivedData
      uses: actions/cache@v2
      with:
        path: ios/DerivedData
        key: ${{ runner.os }}-deriveddata-${{ hashFiles('**/*.xcodeproj/project.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-deriveddata-

    - name: Setup ccache
      run: |
        brew install ccache
        echo 'export PATH="/usr/local/opt/ccache/libexec:$PATH"' >> $BASH_ENV
        source $BASH_ENV
        mkdir -p ~/.ccache
        echo "max_size = 5G" > ~/.ccache/ccache.conf

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'

    - name: Install Watchman
      run: brew install watchman

    - name: Setup Fastlane
      uses: actions/checkout@v2
      with:
        repository: fastlane/fastlane

    - name: Run Fastlane for Mac Catalyst x86_64
      if: matrix.arch == 'x86_64'
      run: bundle exec fastlane ios build_catalyst_x86_64

    - name: Run Fastlane for Mac Catalyst arm64
      if: matrix.arch == 'arm64'
      run: bundle exec fastlane ios build_catalyst_arm64

    - name: Fail if previous step failed
      if: failure()
      run: exit 1

  build-uwp:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup cache for node_modules
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node_modules-

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Enable Developer Mode
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        $RegistryKeyPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock"
        if (-not (Test-Path -Path $RegistryKeyPath)) {
          New-Item -Path $RegistryKeyPath -ItemType Directory -Force
        }
        Set-ItemProperty -Path $RegistryKeyPath -Name AllowDevelopmentWithoutDevLicense -Value 1 -Type DWord

    - name: Enable Long Paths
      run: Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -Type DWord

    - name: Install dependencies
      run: npm install

    - name: Install MSBuild Log Viewer
      run: choco install msbuild-structured-log-viewer

    - name: Build UWP app
      run: |
        msbuild /t:Restore "/p:RestoreProjectStyle=PackagesConfig;RestorePackagesConfig=true" /p:Configuration=Release /p:Platform=${{ matrix.arch }} ReactReunion.sln
        msbuild /restore /p:Configuration=Release /p:Platform=${{ matrix.arch }} ReactReunion.sln
        msbuild /p:Configuration=Release /p:Platform=${{ matrix.arch }} /t:Build ReactReunion.sln

    - name: Fail if previous step failed
      if: failure()
      run: exit 1
